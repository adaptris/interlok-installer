import org.apache.tools.ant.filters.*

plugins {
  // Apply the java-library plugin to add support for Java Library
  id "application"
  id "java-library"
  id "jacoco"
  id "maven-publish"
  id "org.openjfx.javafxplugin" version "0.0.10"
  id 'org.owasp.dependencycheck' version "6.2.2"
}

ext {
  releaseVersion = project.findProperty("releaseVersion") ?: "4.2-SNAPSHOT"
  nexusBaseUrl = project.findProperty("nexusBaseUrl") ?: "https://nexus.adaptris.net/nexus"
  mavenPublishUrl = project.findProperty("mavenPublishUrl") ?: nexusBaseUrl + "/content/repositories/snapshots"
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.findProperty("repoUsername") ?: "set in gradle.properties"
  repoPassword = project.findProperty("repoPassword") ?: "set in gradle.properties"
  targetPlatform = project.findProperty("targetPlatform") ?: "win"

  platforms = ["win", "linux", "mac"]
  // Validate Target Platform
  if (!platforms.contains(targetPlatform)) {
    throw new GradleException("The value of 'targetPlatform' should be 'win', 'linux' or 'mac'. '$targetPlatform' is invalid.")
  }

  componentName = "Interlok Installer"
  componentDesc = "Interlok installer built using JavaFX"
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  javafxVersion = "11.0.2"
  junitJupiterVersion = "5.7.2"
}

repositories {
  mavenCentral()
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
  maven { url "https://repo.gradle.org/gradle/libs-releases-local/" } // Required for JavaFx and Gradle Tooling API dependencies
}

dependencies {
  implementation "org.gradle:gradle-tooling-api:7.1.1"

  runtimeOnly "org.openjfx:javafx-base:$javafxVersion:$targetPlatform"
  runtimeOnly "org.openjfx:javafx-graphics:$javafxVersion:$targetPlatform"
  runtimeOnly "org.openjfx:javafx-controls:$javafxVersion:$targetPlatform"
  runtimeOnly "org.openjfx:javafx-fxml:$javafxVersion:$targetPlatform"

  // Use JUnit test framework
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

group   = "com.adaptris"
version = releaseVersion

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

processResources {
  filesMatching("**/*.properties") {
    filter ReplaceTokens, tokens: [
	    "release.version": project.property("releaseVersion")
	  ]
  }
}

mainClassName = "com.adaptris.installer.Launcher"

jar {
  manifest {
    attributes "Main-Class": mainClassName
  }
}

task uberJar(type: Jar) {
  manifest {
    attributes "Main-Class": mainClassName
  }
  // Build a uber jar
  archiveClassifier = targetPlatform
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

distributions {
  installer {
    distributionBaseName = "$project.name-$targetPlatform"
    contents {
      with distributions.main.contents
    }
  }
}

javafx {
  version = javafxVersion
  modules = [ "javafx.graphics", "javafx.controls", "javafx.fxml" ]
  configuration = "compileOnly"
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

test {
  useJUnitPlatform()
  include "com/adaptris/**/*Test*.class"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar { classifier "sources" }
      artifact uberJar

      if ("win" == targetPlatform) {
        artifact distZip { classifier targetPlatform }
      } else {
        artifact distTar { classifier targetPlatform }
      }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "4.0.0+")
        properties.appendNode("license", "false")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-installer/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-installer")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

task initImplementationConfiguration {
  doLast {
    javafx.configuration = "implementation"
  }
}

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  skipConfigurations = [ "antSql", "spotbugs", "umlDoclet", "offlineJavadocPackages", "javadoc", "jacocoAnt", "jacocoAgent", "spotbugsPlugins", "spotbugsSlf4j" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
  }
}

check.dependsOn initImplementationConfiguration
check.dependsOn jacocoTestReport
